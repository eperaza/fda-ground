variables:
  ARTIFACTORY_URL: https://artifactory.digitalaviationservices.com/artifactory # The Artifactory url where stores the web app artifacts
  PIPELINE_SCRIPTS_DIR: $CI_PROJECT_DIR/pipeline-scripts # The full path of directory where the shared pipeline scripts are located
  ROOT_WEB_APP_DIR: $CI_PROJECT_DIR/GreetingService # The full path of the root directory of the Java web application
  COVERITY_WORKING_DIR: $CI_PROJECT_DIR/cov # The full path of directory which will be used during the coverity execution
  MAVEN_BUILD_PROFILE: gitlab-ci # The name of the profile for Maven build
  DOCKER_REGISTRY: daaacrprod.azurecr.io # docker registry of GitLab
  MAVEN_COMMAND_COMMON_OPTIONS: "--batch-mode --errors --fail-at-end --show-version" # The common options for Maven commands
  APP_NAME: $CI_DA_PROJECT-sample-java-webapp-$CI_DA_STAGE-$CI_DA_LOCATION # The name of the web application
  BUILD_APP_NAME: $CI_DA_PROJECT-sample-java-webapp-ci-$CI_DA_LOCATION # The custom name of the web application for build stage
  DEPLOYMENT_NAME: sample-java-webapp-deployment # The ARM deployment name
  STAGING_SLOT: staging # The name of the staging slot
  PACKAGE_NAME: GreetingService.war # The package name
  PACKAGE_VERSION: "1.0.3" # The package version
  PACKAGE_ARTIFACTORY_REPOSITORY: daa-blob-local # The name of the Artifactory repository where the package will be published to
  PACKAGE_ARTIFACTORY_DIRECTORY: sample-java-webapp # The name of directory in Artifactory where the package is located
  PACKAGE_ARTIFACTORY_DOWNLOAD_URL: "${ARTIFACTORY_URL}/${PACKAGE_ARTIFACTORY_REPOSITORY}/${PACKAGE_ARTIFACTORY_DIRECTORY}/${PACKAGE_VERSION}/${PACKAGE_NAME}" # The Artifactory URL where the package to deploy is located
  PACKAGE_ARTIFACTORY_UPLOAD_URL: "${ARTIFACTORY_URL}/${PACKAGE_ARTIFACTORY_REPOSITORY}/${PACKAGE_ARTIFACTORY_DIRECTORY}/${PACKAGE_VERSION}/${PACKAGE_NAME};branch=${CI_BUILD_REF_NAME};ref=${CI_BUILD_REF};build=${CI_BUILD_ID};" # The Artifactory URL which is used to upload the build package
    
stages:
  - checkout
  - deploy:build
  - deploy:dev
  - deploy:test
  - unittest
  - version
  - build
  - codescan
  - publish
  - staging:build
  - staging:dev
  - staging:test
  - release:build
  - release:dev
  - release:test
  - cleanup
  - tag

checkout:
  stage: checkout
  image: $DOCKER_REGISTRY/daa/git:1.8
  script:
    - export CLONE_BASE_URL=$(echo $CI_REPOSITORY_URL | sed -r "s#(https?\:\/\/[^\/]+)\/.+\.git#\1#")
    - git clone "$CLONE_BASE_URL/gallery/pipeline-scripts.git" $PIPELINE_SCRIPTS_DIR
  artifacts:
    paths:
      - $PIPELINE_SCRIPTS_DIR/
    expire_in: 1 day

maven-build:
  stage: build
  image: $DOCKER_REGISTRY/daa/maven:3.5
  dependencies:
    - checkout
  script:
    - cd $CI_PROJECT_DIR
    - mvn clean package -Dmaven.test.skip=true -P $MAVEN_BUILD_PROFILE $MAVEN_COMMAND_COMMON_OPTIONS
  artifacts:
    paths:
      - $CI_PROJECT_DIR/target/
    expire_in: 1 day


sonarqube:
  stage: codescan
  image: $DOCKER_REGISTRY/daa/sonar-scanner:3.0
  except:
    - tags
    - schedules
  before_script:
    # This part should be moved to the sonar-scanner docker image
    - curl -L -o /tmp/jdk-8-linux-x64.tar.gz -k "https://artifactory.digitalaviationservices.com/artifactory/daa-blob-local/java/jdk/jdk-8u144-linux-x64.tar.gz"
    - mkdir -p /usr/java
    - tar -C /usr/java -xvzf /tmp/jdk-8-linux-x64.tar.gz jdk1.8.0_144/jre
    - mv -f /usr/java/jdk1.8.0_144/jre /usr/java/jre1.8.0_144
    - cat /etc/pki/ca-trust/source/anchors/Boeing_Basic_Assurance_Software_Issuing_CA_G3.cer | awk '{print > "/tmp/Boeing_Basic_Assurance_Software-" (n+0) ".pem"} /-----END CERTIFICATE-----/ {n++}'
    - /usr/java/jre1.8.0_144/bin/keytool -importcert -keystore /opt/sonar-scanner/jre/lib/security/cacerts -storepass changeit -alias BoeingRootCA -file /tmp/Boeing_Basic_Assurance_Software-0.pem -noprompt
    - /usr/java/jre1.8.0_144/bin/keytool -importcert -keystore /opt/sonar-scanner/jre/lib/security/cacerts -storepass changeit -trustcacerts -alias BoeingSoftwareIssuingCAG3 -file /tmp/Boeing_Basic_Assurance_Software-1.pem -noprompt
  script:
    - project_key="$(echo $CI_PROJECT_PATH | tr / :)"
    - sonar-scanner -X 
      -Dsonar.host.url="${CI_DA_SONAR_SERVER}" 
      -Djavax.net.ssl.trustStore=/opt/sonar-scanner/jre/lib/security/cacerts
      -Dsonar.sourceEncoding=utf-8
      -Dsonar.c.file.suffixes=-
      -Dsonar.cpp.file.suffixes=-
      -Dsonar.objc.file.suffixes=-
      -Djavax.net.ssl.trustStorePassword=changeit
      -Dsonar.java.libraries="${CI_PROJECT_DIR}/target"
      -Dsonar.java.binaries="${CI_PROJECT_DIR}/target/classes" 
      -Dsonar.login="${CI_DA_SONAR_TOKEN}" 
      -Dsonar.sources="${CI_PROJECT_DIR}/src" 
      -Dsonar.projectKey="${project_key}" 
      -Dsonar.projectName="${project_key}" 
      -Dsonar.projectVersion="${PROJECT_VERSION}"
